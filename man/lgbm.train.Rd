% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lgbm.train.R
\name{lgbm.train}
\alias{lgbm.train}
\title{LightGBM Model Training}
\usage{
lgbm.train(y_train, x_train, bias_train = NA, y_val = NA, x_val = NA,
  x_test = NA, SVMLight = is(x_train, "dgCMatrix"), data_has_label = TRUE,
  NA_value = "na", lgbm_path = "path/to/LightGBM.exe",
  workingdir = getwd(), train_name = paste0("lgbm_train", ifelse(SVMLight,
  ".svm", ".csv")), val_name = paste0("lgbm_val", ifelse(SVMLight, ".svm",
  ".csv")), test_name = paste0("lgbm_test", ifelse(SVMLight, ".svm", ".csv")),
  init_score = ifelse(is.na(bias_train), NA, paste(train_name, ".weight", sep
  = "")), files_exist = FALSE, save_binary = FALSE,
  train_conf = "lgbm_train.conf", pred_conf = "lgbm_pred.conf",
  test_conf = "lgbm_test.conf", validation = ifelse(is.na(y_val), FALSE,
  TRUE), predictions = FALSE, predict_leaf_index = FALSE,
  output_preds = "lgbm_predict_result.txt",
  test_preds = "lgbm_predict_test.txt", verbose = TRUE,
  log_name = "lgbm_log.txt", full_quiet = FALSE, full_console = FALSE,
  importance = FALSE, output_model = "lgbm_model.txt", input_model = NA,
  num_threads = 2, histogram_pool_size = -1, is_sparse = TRUE,
  two_round = FALSE, application = "regression", learning_rate = 0.1,
  num_iterations = 10, early_stopping_rounds = NA, num_leaves = 127,
  min_data_in_leaf = 100, min_sum_hessian_in_leaf = 10, max_bin = 255,
  feature_fraction = 1, feature_fraction_seed = 2, bagging_fraction = 1,
  bagging_freq = 0, bagging_seed = 3, is_sigmoid = TRUE, sigmoid = 1,
  is_unbalance = FALSE, max_position = 20, label_gain = c(0, 1, 3, 7, 15,
  31, 63), metric = "l2", metric_freq = 1, is_training_metric = FALSE,
  ndcg_at = c(1, 2, 3, 4, 5), tree_learner = "serial",
  is_pre_partition = FALSE, data_random_seed = 1, num_machines = 1,
  local_listen_port = 12400, time_out = 120, machine_list_file = "")
}
\arguments{
\item{y_train}{Type: vector. The training labels.}

\item{x_train}{Type: data.table (preferred), data.frame, or dgCMatrix (with \code{SVMLight = TRUE}). The training features. Not providing a data.frame results in at least 3x memory usage.}

\item{bias_train}{Type: numeric or vector of numerics. The initial weights of the training data. If a numeric is provided, then the weights are identical for all the training samples. Otherwise, use the vector as weights. Defaults to \code{NA}.}

\item{y_val}{Type: vector. The validation labels. Defaults to \code{NA}. Unused when \code{validation} is \code{TRUE}.}

\item{x_val}{Type: data.table (preferred), data.frame, or dgCMatrix (with \code{SVMLight = TRUE}). The validation features. Defaults to \code{NA}. Unused when \code{validation} is \code{TRUE}.}

\item{x_test}{Type: data.table (preferred), data.frame, or dgCMatrix (with \code{SVMLight = TRUE}). The testing features, if necessary.}

\item{SVMLight}{Type: boolean. Whether the input is a dgCMatrix to be output to SVMLight format. Setting this to \code{TRUE} enforces you must provide labels separately (in \code{y_train}) and headers will be ignored. This is default behavior of SVMLight format. Defaults to \code{is(x_train, "dgCMatrix")}.}

\item{data_has_label}{Type: boolean. Whether the training and validation data have labels or not. Do not modify this. Defaults to \code{TRUE}.}

\item{NA_value}{Type: numeric or character. What value replaces NAs. Use \code{"na"} if you want to specify "missing". It is not recommended to use something else, even by soemthing like a numeric value out of bounds (like \code{-999} if all your values are greater than \code{-999}). You should change from the default \code{"na"} if they have a real numeric meaning. Defaults to \code{"na"}.}

\item{lgbm_path}{Type: character. Where is stored LightGBM? Include only the folder to it. Defaults to \code{'path/to/LightGBM.exe'}.}

\item{workingdir}{Type: character. The working directory used for LightGBM. Defaults to \code{getwd()}.}

\item{train_name}{Type: character. The name of the training data file for the model. Defaults to \code{paste0('lgbm_train', ifelse(SVMLight, '.svm', '.csv'))}.}

\item{val_name}{Type: character. The name of the testing data file for the model. Defaults to \code{paste0('lgbm_val', ifelse(SVMLight, '.svm', '.csv'))}.}

\item{test_name}{Type: character. The name of the testing data file for the model. Defaults to \code{paste0('lgbm_test', ifelse(SVMLight, '.svm', '.csv'))}.}

\item{init_score}{Type: string. The file name of initial (bias) training scores to start training LightGBM, which contains \code{bias_train} values. Defaults to \code{ifelse(is.na(bias_train), NA, paste(train_name, ".weight", sep = ""))}, which means \code{NA} if \code{bias_train} is left default, else appends \code{".weight"} extension to \code{train_name} name.}

\item{files_exist}{Type: boolean. Whether the training (and testing) files are already existing. It overwrites files if there are any existing. Defaults to \code{FALSE}.}

\item{save_binary}{Type: boolean. Whether data should be saved as binary files for faster load. The name takes automatically the name from the \code{train_name} and adds the extension \code{".bin"}. Defaults to \code{FALSE}.}

\item{train_conf}{Type: character. The name of the training configuration file for the model. Defaults to \code{'lgbm_train.conf'}.}

\item{pred_conf}{Type: character. The name of the prediction configuration file for the model. Defaults to \code{'lgbm_pred.conf'}.}

\item{test_conf}{Type: character. The name of the testing prediction configuration file for the model. Defaults to \code{'lgbm_test.conf'}.}

\item{validation}{Type: boolean. Whether LightGBM performs validation during the training, by outputting metrics for the validation data. Defaults to \code{ifelse(is.na(y_val), FALSE, TRUE)}, which means if \code{y_val} is the default value (unfilled), \code{validation} is \code{FALSE} else \code{TRUE}. Multi-validation data is not supported yet.}

\item{predictions}{Type: boolean. Should LightGBM compute predictions after training the model? Defaults to \code{FALSE}.}

\item{predict_leaf_index}{Type: boolean. When \code{predictions} is \code{TRUE}, should LightGBM predict leaf indexes? Defaults to \code{FALSE}. Largely recommended to keep it \code{FALSE} unless you know what you are doing.}

\item{output_preds}{Type: character. The file name of the prediction results for the model. Defaults to \code{'lgbm_predict_result.txt'}. Original name is \code{output_result}.}

\item{test_preds}{Type: character. The file name of the prediction results for the model. Defaults to \code{'lgbm_predict_test.txt'}.}

\item{verbose}{Type: boolean/integer. Whether to print a lot of debug messages in the console or not. 0 is FALSE and 1 is TRUE. Defaults to \code{TRUE}. When set to \code{FALSE}, the model log is output to \code{log_name} which allows to get metric information from the \code{log_name} parameter!!!}

\item{log_name}{Type: character. The logging (sink) file to output (like 'log.txt'). Defaults to \code{'lgbm_log.txt'}.}

\item{full_quiet}{Type: boolean. Whether file writing is quiet or not. When set to \code{TRUE}, the default printing is diverted to \code{'diverted_verbose.txt'}. Combined with \code{verbose = FALSE}, the function is fully quiet. Defaults to \code{FALSE}.}

\item{full_console}{Type: boolean. Whether a dedicated console should be visible. Defaults to \code{FALSE}.}

\item{importance}{Type: boolean. Should LightGBM perform feature importance? Defaults to \code{FALSE}.}

\item{output_model}{Type: character. The file name of output model. Defaults to \code{'lgbm_model.txt'}.}

\item{input_model}{Type: character. The file name of input model. If defined, LightGBM will resume training from that file. You MUST user a different \code{output_model} file name if you define \code{input_model}. Otherwise, you are overwriting your model (and if your model cannot learn by stopping immediately at the beginning, you would LOSE your model). Defaults to \code{NA}.}

\item{num_threads}{Type: integer. The number of threads to run for LightGBM. It is recommended to not set it higher than the amount of physical cores in your computer. Defaults to \code{2}. In virtualized environments, it can be better to set it to the maximum amount of threads allocated to the virtual machine (especially VirtualBox).}

\item{histogram_pool_size}{Type: integer. The maximum cache size (in MB) allocated for LightGBM histogram sketching. Values below \code{0} (like \code{-1}) means no limit. Defaults to \code{-1}.}

\item{is_sparse}{Type: boolean. Whether sparse optimization is enabled. Do not set this to \code{FALSE} unless you want to see your model being underperforming or if you know what you are going to do. Defaults to \code{TRUE}.}

\item{two_round}{Type: boolean. LightGBM maps data file to memory and load features from memory to maximize speed. If the data is too large to fit in memory, use TRUE. Defaults to \code{FALSE}.}

\item{application}{Type: character. The label application to learn. Must be either \code{'regression'}, \code{'binary'}, or \code{'lambdarank'}. Defaults to \code{'regression'}.}

\item{learning_rate}{Type: numeric. The shrinkage rate applied to each iteration. Lower values lowers overfitting speed, while higher values increases overfitting speed. Defaults to \code{0.1}.}

\item{num_iterations}{Type: integer. The number of boosting iterations LightGBM will perform. Defaults to \code{10}.}

\item{early_stopping_rounds}{Type: integer. The number of boosting iterations whose validation metric is lower than the best is required for LightGBM to automatically stop. Defaults to \code{NA}.}

\item{num_leaves}{Type: integer. The number of leaves in one tree. Roughly, a recommended value is \code{n^2 - 1}, \code{n} being the theoretical depth if each tree were identical. Lower values lowers tree complexity, while higher values increases tree complexity. Defaults to \code{127}.}

\item{min_data_in_leaf}{Type: integer. Minimum number of data in one leaf. Higher values potentially decrease overfitting. Defaults to \code{100}.}

\item{min_sum_hessian_in_leaf}{Type: numeric. Minimum sum of hessians in one leaf to allow a split. Higher values potentially decrease overfitting. Defaults to \code{10.0}.}

\item{max_bin}{Type: integer. The maximum number of bins created per feature. Lower values potentially decrease overfitting. Defaults to \code{255}.}

\item{feature_fraction}{Type: numeric (0, 1). Column subsampling percentage. For instance, 0.5 means selecting 50\% of features randomly for each iteration. Lower values potentially decrease overfitting, while training faster. Defaults to \code{1.0}.}

\item{feature_fraction_seed}{Type: integer. Random starting seed for the column subsampling (\code{feature_fraction}). Defaults to \code{2}.}

\item{bagging_fraction}{Type: numeric (0, 1). Row subsampling percentage. For instance, 0.5 means selecting 50\% of rows randomly for each iteration. Lower values potentially decrease overfitting, while training faster. Defaults to \code{1.0}. Unused when \code{bagging_freq} is \code{0}.}

\item{bagging_freq}{Type: integer. The frequency of row subsampling (\code{bagging_fraction}). Lower values potentially decrease overfitting, while training faster. Defaults to \code{0}.}

\item{bagging_seed}{Type: integer. Random starting seed for the row subsampling (\code{bagging_fraction}). Defaults to \code{3}.}

\item{is_sigmoid}{Type: boolean. Whether to use a sigmoid transformation of raw predictions. Defaults to \code{TRUE}.}

\item{sigmoid}{Type: numeric. "The sigmoid parameter". Defaults to \code{1.0}.}

\item{is_unbalance}{Type: boolean. For binary classification, setting this to TRUE might be useful when the training data is unbalanced. Defaults to \code{FALSE}.}

\item{max_position}{Type: integer. For lambdarank, optimize NDCG for that specific value. Defaults to \code{20}.}

\item{label_gain}{Type: vector of integers. For lambdarank, relevant gain for labels. Defaults to \code{c(0, 1, 3, 7, 15, 31, 63)}.}

\item{metric}{Type: character, or vector of characters. The metric to optimize. There are 6 available: \code{'l1'} (absolute loss), \code{'l2'} (squared loss), \code{'ndcg'} (NDCG), \code{'auc'} (AUC), \code{'binary_logloss'} (logarithmic loss), and \code{'binary_error'} (accuracy). Defaults to \code{'l2'}. Use a vector of characters to pass multiple metrics.}

\item{metric_freq}{Type: integer. The frequency to report the metric(s). Defaults to \code{1}.}

\item{is_training_metric}{Type: boolean. Whether to report the training metric in addition to the validation metric. Defaults to \code{FALSE}.}

\item{ndcg_at}{Type: vector of integers. Evaluate NDCG metric at these values. Defaults to \code{c(1, 2, 3, 4, 5)}.}

\item{tree_learner}{Type: character. The type of learner use, between \code{'serial'} (single machine tree learner), \code{'feature'} (feature parallel tree learner), \code{'data'} (data parallel tree learner). Defaults to \code{'serial'}.}

\item{is_pre_partition}{Type: boolean. Whether data is pre-partitioned for parallel learning. Defaults to \code{FALSE}.}

\item{data_random_seed}{Type: integer. Random starting seed for the parallel learner. Defaults to \code{1}.}

\item{num_machines}{Type: integer. When using parallel learning, the number of machines to use. Defaults to \code{1}.}

\item{local_listen_port}{Type: integer. The TCP listening port for the local machines. Allow this port in the firewall before training. \code{12400}.}

\item{time_out}{Type: integer. The socket time-out in minutes. Defaults to \code{120}.}

\item{machine_list_file}{Type: character. The file that contains the machine list for parallel learning. A line in that file much correspond to one IP and one port for one machine, separated by space instead of a colon (\code{:}). Defaults to \code{''}.}
}
\value{
A list with the stored trained model (\code{Model}), the path (\code{Path}) of the trained model, the name (\code{Name}) of the trained model file, the LightGBM path (\code{lgbm}) which trained the model, the training file name (\code{Train}), the validation file name even if there were none provided (\code{Valid}), the testing file name even if there were none provided (\code{Test}), the validation predictions (\code{Validation}) if \code{Predictions} is set to \code{TRUE} with a validation set, the testing predictions (\code{Testing}) if \code{Predictions} is set to \code{TRUE} with a testing set, the name of the log file \code{Log} if \code{verbose} is set to \code{FALSE}, the log file content \code{LogContent} if \code{verbose} is set to \code{FALSE}, the metrics \code{Metrics} if \code{verbose} is set to \code{FALSE}, the best iteration (\code{Best}) if \code{verbose} is set to \code{FALSE}, the column names \code{Columns} if \code{importance} is set to \code{TRUE}, and the feature importance \code{FeatureImp} if \code{importance} is set to \code{TRUE}. Returns a character variable if LightGBM is not found under lgbm_path.
}
\description{
This function allows you to train a LightGBM model.
It is recommended to have your x_train and x_val sets as data.table, and to use the development data.table version.
To install data.table development version, please run in your R console: \code{install.packages("data.table", type = "source", repos = "http://Rdatatable.github.io/data.table")}.
The speed increase to create the train and test files can exceed 1,000x over write.table in certain cases.
To store evaluation metrics throughout the training, you MUST run this function with \code{verbose = FALSE}.
}
\details{
The most important parameters are \code{lgbm_path} and \code{workingdir}: they setup where LightGBM is and where temporary files are going to be stored. \code{lgbm_path} is the full path to LightGBM executable, and includes the executable name and file extension (like \code{C:/Laurae/LightGBM/windows/x64/Release/LightGBM.exe}). \code{workingdir} is the working directory for the temporary files for LightGBM. It creates a lot of necessary files to make LightGBM work (defined by \code{output_model, output_preds, train_conf, train_name, val_name, pred_conf}).

\code{train_conf}, \code{train_name}, and \code{val_name} defines respectively the configuration file name, the train file name, and the validation file name. They are created under this name when \code{files_exist} is set to \code{FALSE}.

Once you filled these variables (and if they were appropriate), you should fill \code{y_train, x_train}. If you need model validation, fill also \code{y_val, x_val}. y is your label (a vector), while x is your data.table (preferred) or a data.frame or a matrix.

Then, you are up to choose what you want, including hyperparameters to verbosity control.

To get the metric table, you MUST use \code{verbose = FALSE}. It cannot be fetched without. \code{sink()} does not work.

If for some reason you lose the ability to print in the console, run \code{sink()} in the console several times until you get an error.
}
\examples{
\dontrun{
Train a regression model on 1000 samples and validate on 1000 others, with feature importance.
Runs on 4 threads.
1000 iterations with shrinkage of 0.1, stop when 10 iterations are not increase performance.
127 leaves for an "approximate equivalent" of depth = 7.
Uses the working dir / temp folder as working directory for the temporary files.
trained <- lgbm.train(y_train = targets[1:1000],
                      x_train = data[1:1000, ],
                      y_val = targets[1001:2000],
                      x_val = data[1001:2000, ],
                      lgbm_path = "C:/LightGBM/windows/x64/Release/lightgbm.exe",
                      workingdir = file.path(getwd(), "temp"),
                      validation = TRUE,
                      predictions = TRUE,
                      importance = TRUE,
                      num_threads = 4,
                      application = "regression",
                      learning_rate = 0.1,
                      num_iterations = 1000,
                      early_stopping_rounds = 10,
                      num_leaves = 127,
                      files_exist = FALSE)
}

}

