% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rule_double.R
\name{rule_double}
\alias{rule_double}
\title{Outlying bivariate linear continuous association rule finder}
\usage{
rule_double(data, label, train_rows = length(label), iterations = 1000,
  minimal_score = 25, minimal_node = 5, false_negatives = 2,
  seed = 11111)
}
\arguments{
\item{data}{The data.frame containing the features to make association rules on, or the scoring matrix. Missing values are not allowed.}

\item{label}{The target label as an integer vector (each value must be either 0 or 1). 1 must be the miniority label.}

\item{train_rows}{The rows used for training the association rules. Must be your training set, whose length is equal to \code{length(labels)}. Defaults to \code{length(label)}.}

\item{iterations}{The amount of iterations allowed for limited-memory Gradient Descent}

\item{minimal_score}{The association rule finder will not accept any node under the allowed outlying score. Defaults to \code{25}.}

\item{minimal_node}{The association rule finder will not accept any node containing under that specific amount of samples. Defaults to \code{5}.}

\item{false_negatives}{The association rule will allow at most (\code{false_negatives - 1}) false negatives. A higher allows a more permissive algorithm, lower makes it very difficult to converge (or to find any rule at all). Defaults to \code{2}.}

\item{seed}{The random seed for reproducibility. Defaults to \code{11111}.}
}
\value{
A vector with \code{nrow(data)} elements: the general result for each observation using bivariate rules.
}
\description{
This function allows you to search for association rules on outlying bivariate linear continuous features against a binary label. The predicted label is 0, and the overfitting severity is very high (see: Kaggle's Santander Customer Satisfaction competition).
Unlike the univariate rule finder, it cannot be used to score outliers first (a 300 feature matrix can get to about 9000 features...).
Verbosity is automatic and cannot be removed. In case you need this function without verbosity, please compile the package after removing verbose messages.
}
\examples{
\dontrun{
rules <- rule_double(data = scored_data, label = target, iterations = 100)
preds <- preds[rules[(length(target)+1):(nrow(data))] == 0] <- 0
}

}

