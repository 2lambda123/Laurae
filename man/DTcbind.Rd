% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DTcbind.R
\name{DTcbind}
\alias{DTcbind}
\title{data.table column binding (nearly without) copy}
\usage{
DTcbind(dt1, dt2, low_mem = FALSE, collect = 0, silent = FALSE)
}
\arguments{
\item{dt1}{Type: data.table. The data.table to combine on.}

\item{dt2}{Type: data.table. The data.table to "copy" on \code{dt1}}

\item{low_mem}{Type: boolean. Unallows dt2 twice in memory by deleting \code{dt2} (WARNING: empties your \code{dt2}) to save memory when set to \code{TRUE}. Setting it to \code{FALSE} allow \code{dt2} to reside twice in memory, therefore memory usage increases. Defaults to \code{FALSE}.}

\item{collect}{Type: integer. Forces a garbage collect every \code{collect} iterations to clear up memory. Setting this to \code{1} along with \code{low_mem} = \code{TRUE} leads to the lowest possible memory usage one can ever get to merge two data.tables. It also prints verbose information about the process everytime it garbage collects. Setting this to \code{0} leads to no garbage collect. Lower values increases the time required to bind the data.tables. Defauls to \code{0}.}

\item{silent}{Type: boolean. Force silence during garbage collection iterations at no speed cost. Defaults to \code{TRUE}.}
}
\value{
Nothing (the merged data.table is in \code{dt1} itself)
}
\description{
This function attempts to cbind two data.tables without making copies. Compared to cbind, this can result to up to 3X memory efficiency. By default, a 2X memory efficiency is minimal with frequent garbage collects.
}
\details{
Warning: \code{dt1} and \code{dt2} are pointers only even if you pass the objects to this function. This is how memory efficiency is achieved.
}
\examples{
#library(data.table)
df1 <- data.frame(matrix(nrow = 50000, ncol = 1000))
df2 <- data.frame(matrix(nrow = 50000, ncol = 1000))
setDT(df1)
setDT(df2)
df1[is.na(df1)] <- 1
gc()
df2[is.na(df2)] <- 2
gc() # look memory usage
# open a task manager to check current RAM usage
DTcbind(df1, df2, low_mem = TRUE, collect = 10, silent = FALSE)
# check RAM usage in a task manager: it is identical to what we had previously!
gc() # gives no gain
df3 <- data.frame(matrix(nrow = 50000, ncol = 1000))
setDT(df3)
# look on task manager the current RAM usage
# if you are a hero with enough RAM (3GB+ recommended), uncomment the line below and run it
#df1 <- cbind(df1, df3) # RAM usage explodes!

}

